worker_processes 4;

events { worker_connections 1024; }



http {
      proxy_cache_path /tmp/cache levels=1:2 keys_zone=STATIC:30m max_size=1g;
      proxy_temp_path /tmp/cache/tmp;

      # config to don't allow the browser to render the page inside an frame or iframe and avoid clickjacking
      add_header X-Frame-Options SAMEORIGIN;
      
      # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
      # to disable content-type sniffing on some browsers.
      add_header X-Content-Type-Options nosniff;
      
      # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
      # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for 
      # this particular website if it was disabled by the user.
      add_header X-XSS-Protection "1; mode=block";
      
      # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
      # you can tell the browser that it can only download content from the domains you explicitly allow
      # add_header Content-Security-Policy "default-src 'self'";  


      # log_format static-log 'STATIC $request';
      # log_format backend-log 'Backend requested';


      

      gzip on;
      gzip_comp_level 6;
      gzip_vary on;
      gzip_min_length  1400;
      gzip_proxied any;
      gzip_types text/plain application/javascript image/svg+xml application/json;
      gzip_buffers 16 8k;



      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;
      proxy_http_version 1.1;


      proxy_cache STATIC;
      proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie; 

      upstream v1 {
            server 88.198.93.219;
      }

      upstream v2 {
            server balancer:80;
      }

      upstream static {
            server static:3001;
      }


      split_clients "seedString${remote_addr}${http_user_agent}${date_gmt}" $upstream_variant {
            50%               "v1";
            *                 "v2";
      }

      map $cookie_sticky_upstream $upstream_group {
            default           $upstream_variant;
            v1                v1;
            v2                v2;
      }


         
      server {
            server_tokens off;

            server_name stage.wavesplatform.com www.stage.wavesplatform.com;

            listen 80;

            error_page 400 500 502 503 504 /500.html;

            location = /500.html {
                root /usr/share/nginx/html;
                internal;
            }


            location / {
                  add_header Set-Cookie "sticky_upstream=$upstream_group;Path=/;";

                  proxy_intercept_errors on;

                  if ($upstream_group = 'v2') {
                        rewrite ^/$ http://stage2.wavesplatform.com redirect;
                        break;
                  }
                  
                  proxy_pass http://v1/;
                  proxy_set_header Host www.wavesplatform.com;
            }
      }


      server {
            server_tokens off;

            server_name stage2.wavesplatform.com www.stage2.wavesplatform.com;

            listen 80;

            location /testing-500 {
                fastcgi_pass unix:/does/not/exist;
            }

            location /static {
                  proxy_pass http://static;
                  # access_log /dev/stdout static-log;
                  proxy_cache_valid  200 302 1d;
            }

            
            location / {
                  proxy_pass http://v2/;

                  proxy_intercept_errors on;
                  proxy_cache_valid  200 302 5m;
                  proxy_cache_valid  404 30d;
                  
                  # access_log /dev/stdout backend-log;
            }

      }
}