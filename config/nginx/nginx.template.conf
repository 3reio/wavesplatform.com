daemon off;

worker_processes 4;

events { worker_connections 1024; }



http {
      proxy_cache_path /tmp/cache levels=1:2 keys_zone=STATIC:30m max_size=1g;
      proxy_temp_path /tmp/cache/tmp;


      # security
      add_header X-Frame-Options SAMEORIGIN;
      add_header X-Content-Type-Options nosniff;
      add_header X-XSS-Protection "1; mode=block";
      # add_header Content-Security-Policy "default-src 'self'";  


      # log_format static-log 'STATIC $request';
      # log_format backend-log 'Backend requested';


      gzip on;
      gzip_comp_level 6;
      gzip_vary on;
      gzip_min_length  1400;
      gzip_proxied any;
      gzip_types text/plain application/javascript image/svg+xml application/json;
      gzip_buffers 16 8k;


      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;
      proxy_http_version 1.1;


      proxy_cache STATIC;
      proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie; 


      upstream v1 {
            server 88.198.93.219;
      }

      upstream v2 {
            server balancer:80;
      }

      upstream static {
            server static:3001;
      }


      split_clients "seedString${remote_addr}${http_user_agent}${date_gmt}" $upstream_variant {
            50%               "v1";
            *                 "v2";
      }

      map $cookie_sticky_upstream $upstream_group {
            default           $upstream_variant;
            v1                v1;
            v2                v2;
      }


      server {
            server_tokens off;
            listen 80 default_server;
	      listen [::]:80 default_server;
	      server_name _;
	      return 301 https://$host$request_uri;
      }
         
      server {
            server_tokens off;

            server_name ${SERVER_NAME} www.${SERVER_NAME};

            listen 443 ssl;
            
            ssl_certificate         /etc/nginx/wavesplatform.pem;
            ssl_certificate_key     /etc/nginx/wavesplatform.key;

            error_page 400 500 502 503 504 /500.html;

            location = /500.html {
                root /usr/share/nginx/html;
                internal;
            }


            location / {
                  add_header Set-Cookie "sticky_upstream=$upstream_group;Path=/;";

                  proxy_intercept_errors on;

                  if ($upstream_group = 'v2') {
                        rewrite ^/$ https://beta.wavesplatform.com redirect;
                        break;
                  }
                  
                  proxy_pass http://v1/;
                  proxy_set_header Host www.wavesplatform.com;
            }
      }


      server {
            server_tokens off;

            server_name beta.wavesplatform.com;

            listen 443 ssl;
            
            ssl_certificate         /etc/nginx/wavesplatform.pem;
            ssl_certificate_key     /etc/nginx/wavesplatform.key;


            location /static {
                  proxy_pass http://static;
                  proxy_cache_valid  200 302 1d;

                  # access_log /dev/stdout static-log;
            }
            
            location / {
                  proxy_pass http://v2/;

                  proxy_intercept_errors on;
                  proxy_cache_valid  200 302 5m;
                  proxy_cache_valid  404 30d;

                  # access_log /dev/stdout backend-log;
            }
      }
}